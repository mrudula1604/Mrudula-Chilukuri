/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.Student;

import Business.Business;
import CertifyingAuthority.TranscriptRequest;
import Course.Course;
import Course.CourseDirectory;
import Professor.Professor;
import Student.Student;
import UI.MainJFrame;
import UI.Professor.RegisterProfessorJFrame;
import UserAccount.UserAccount;
import UserAccount.UserAccountDirectory;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author divya
 */
public class StudentJFrame extends javax.swing.JFrame {

    /**
     * Creates new form StudentJFrame
     */
   private Business business;
    private UserAccountDirectory useraccountdir;
    private UserAccount useraccount;
    DefaultTableModel coursesTableModel;
    DefaultTableModel regCoursesTableModel;
    
    private Student student;
    
    /*public StudentJFrame() {
        initComponents();
    }*/

    public StudentJFrame(Business business, UserAccount useraccount) {
       initComponents();
      this.business=business;
      this.useraccount=useraccount ;
      this.coursesTableModel = (DefaultTableModel) courseSearchTable.getModel();
      this.regCoursesTableModel = (DefaultTableModel) registeredCoursesTable.getModel();
      //this.student= student;
      this.setVisible(true);
      
      displayRegisteredCourses();
    }
    
    public void displayRegisteredCourses()
    {
        String studentId = useraccount.getPersonId();
        Student currentStudent = this.business.getStudentDir().findStudent(studentId);
        
        studentIdField.setText(studentId);
        studentNameField.setText(currentStudent.getName());
        studentEmailField.setText(currentStudent.getEmail());
        
        ArrayList<Course> regCourses = currentStudent.getRegisteredCourses().getCourseList();
        
        if(regCourses.size() >= 0) {
            regCoursesTableModel.setRowCount(0);
            for(Course c: regCourses) {
                Object row[] = new Object[5];
                row[0] = c.getCourseID();
                row[1] = c.getCourseName();
                row[2] = c.getProfessor().getName();
                row[3] = c.getCredits();
                row[4] = c.getPrice();
                
               regCoursesTableModel.addRow(row);
            }
        }
        
        
    }
    
    public void displayCourses(ArrayList<Course> courses)
    {
        if(courses.size() >= 0) {
            coursesTableModel.setRowCount(0);
            for(Course c: courses) {
                Object row[] = new Object[10];
                row[0] = c.getCourseID();
                row[1] = c.getCourseName();
                row[2] = c.getProfessor().getName();
                row[3] = c.getProfessor().getRating() ;
                row[4] = c.getLanguage();
                row[5] = c.getTopic();
                row[6] = c.getProfessor().getLocation();
                row[7] = c.getPrice();
                row[8] = c.getReputationIndex();
                row[9] = c.getCredits();
                
               coursesTableModel.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel15 = new javax.swing.JPanel();
        jScrollPane29 = new javax.swing.JScrollPane();
        courseSearchTable = new javax.swing.JTable();
        searchTypeCBox = new javax.swing.JComboBox<>();
        jLabel71 = new javax.swing.JLabel();
        jScrollPane30 = new javax.swing.JScrollPane();
        registeredCoursesTable = new javax.swing.JTable();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        studentIdField = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        studentNameField = new javax.swing.JTextField();
        studentEmailField = new javax.swing.JTextField();
        courseSearchTextField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        registerCourseBtn = new javax.swing.JButton();
        loginBtn = new javax.swing.JButton();
        viewTrBtn = new javax.swing.JButton();
        requestForTranscriptBtn = new javax.swing.JButton();
        profRatingTextField = new javax.swing.JTextField();
        profRatingBtn = new javax.swing.JButton();
        courseRatingTextField = new javax.swing.JTextField();
        courseRatingButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        courseSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CourseId", "CourseName", "ProfessorName", "Rating", "Language", "Topic", "Region", "Price", "Reputation Index", "Credits"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane29.setViewportView(courseSearchTable);

        searchTypeCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Professor Name", "Topic", "Language", "Region" }));

        jLabel71.setText("Search Course By");

        registeredCoursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course name", "Professor name", "Credits", "Fees Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane30.setViewportView(registeredCoursesTable);

        jLabel72.setText("Courses Taken:");

        jLabel73.setText("Name");

        jLabel74.setText("Student ID");

        jLabel75.setText("email");

        searchBtn.setText("search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        registerCourseBtn.setText("register");
        registerCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerCourseBtnActionPerformed(evt);
            }
        });

        loginBtn.setText("back");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        viewTrBtn.setText("view transcript");
        viewTrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTrBtnActionPerformed(evt);
            }
        });

        requestForTranscriptBtn.setText("Request for transcript");
        requestForTranscriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestForTranscriptBtnActionPerformed(evt);
            }
        });

        profRatingBtn.setText("Rate Professor");
        profRatingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profRatingBtnActionPerformed(evt);
            }
        });

        courseRatingButton.setText("Rate Course");
        courseRatingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseRatingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(registerCourseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewTrBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(236, 236, 236))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loginBtn)
                .addGap(130, 130, 130))
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel74)
                            .addComponent(jLabel73)
                            .addComponent(jLabel75))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(studentIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(studentNameField)
                            .addComponent(studentEmailField)))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel71)
                        .addGap(18, 18, 18)
                        .addComponent(searchTypeCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(courseSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(searchBtn))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane30, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel15Layout.createSequentialGroup()
                                    .addComponent(jLabel72)
                                    .addGap(273, 273, 273)
                                    .addComponent(requestForTranscriptBtn))
                                .addGroup(jPanel15Layout.createSequentialGroup()
                                    .addComponent(profRatingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(26, 26, 26)
                                    .addComponent(profRatingBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(courseRatingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(courseRatingButton))))))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginBtn)
                .addGap(6, 6, 6)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel74)
                    .addComponent(studentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel73)
                    .addComponent(studentNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel75)
                    .addComponent(studentEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel72)
                    .addComponent(requestForTranscriptBtn))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane30, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profRatingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(profRatingBtn)
                    .addComponent(courseRatingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseRatingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTypeCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel71)
                    .addComponent(courseSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewTrBtn)
                    .addComponent(registerCourseBtn))
                .addContainerGap())
        );

        getContentPane().add(jPanel15, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewTrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTrBtnActionPerformed
        // TODO add your handling code here:
        String studentId = useraccount.getPersonId();
        Student currentStudent = this.business.getStudentDir().findStudent(studentId);
        if (this.business.getTranscriptRequests().isTranscriptApproved(currentStudent))
        {
            TranscriptJFrame saf = new TranscriptJFrame(this.business, this.useraccount);
            saf.setVisible(true);
            this.setVisible(false);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No approved transcripts found for this student");
        }       
    }//GEN-LAST:event_viewTrBtnActionPerformed




    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        
        String selectedSearchType = searchTypeCBox.getSelectedItem().toString();
        String searchString = courseSearchTextField.getText();
        ArrayList<Course> courses;
        
       switch (selectedSearchType.toLowerCase()) {
       //prof name
           case "professor name":
               courses = this.business.getCourseDir().findCoursesByProfessorName(searchString);
               displayCourses(courses);
               break;
       //region
           case "region":
               courses = this.business.getCourseDir().findCoursesByRegion(searchString);
               displayCourses(courses);
               break;
       //topic
           case "topic":
               courses = this.business.getCourseDir().findCoursesByTopic(searchString);
               displayCourses(courses);
               break;
       //language
           case "language":
               courses = this.business.getCourseDir().findCoursesByLanguage(searchString);
               displayCourses(courses);
               break;
           default:
               break;
       }           
    }//GEN-LAST:event_searchBtnActionPerformed


    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new MainJFrame(business, useraccount);
        
    }//GEN-LAST:event_loginBtnActionPerformed

    private void registerCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerCourseBtnActionPerformed
        String studentId = useraccount.getPersonId();
        Student currentStudent = this.business.getStudentDir().findStudent(studentId);
        int selectedRowIndex = courseSearchTable.getSelectedRow();
        String courseId = courseSearchTable.getValueAt(selectedRowIndex, 0).toString();
        
        if (currentStudent.getRegisteredCourses().findCourse(courseId) != null)
        {
            JOptionPane.showMessageDialog(null, "You are already registered for this course");
        }
        else
        {
            Course course = this.business.getCourseDir().findCourse(courseId);
        
            float currentRev = course.getProfessor().getTotalRevenue();
            course.getProfessor().setTotalRevenue(currentRev + course.getPrice());

            CourseDirectory currentCourses = currentStudent.getRegisteredCourses();
            currentCourses.AddCourse(course);

            currentStudent.setRegisteredCourses(currentCourses); 
        }   
        
        displayRegisteredCourses();
    }//GEN-LAST:event_registerCourseBtnActionPerformed

    private void requestForTranscriptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestForTranscriptBtnActionPerformed
       String studentId = useraccount.getPersonId();
       Student currentStudent = this.business.getStudentDir().findStudent(studentId);
       TranscriptRequest tr = this.business.getTranscriptRequests().createTranscript(currentStudent);
    }//GEN-LAST:event_requestForTranscriptBtnActionPerformed

    private void profRatingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profRatingBtnActionPerformed
        String studentId = useraccount.getPersonId();
        Student currentStudent = this.business.getStudentDir().findStudent(studentId);
        int selectedRowIndex = registeredCoursesTable.getSelectedRow();
        String courseId = registeredCoursesTable.getValueAt(selectedRowIndex, 0).toString();
        
        Float newRating = Float.valueOf(profRatingTextField.getText());
        
        Course course = this.business.getCourseDir().findCourse(courseId);
        Professor prof = course.getProfessor();
        Float currentRating = prof.getRating();
        
        if(currentRating == 0.0)
        {
            prof.setRating(newRating);
        }
        else
        {
            prof.setRating((currentRating + newRating)/2);
        }
        
        displayRegisteredCourses();
    }//GEN-LAST:event_profRatingBtnActionPerformed

    private void courseRatingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseRatingButtonActionPerformed
        String studentId = useraccount.getPersonId();
        Student currentStudent = this.business.getStudentDir().findStudent(studentId);
        int selectedRowIndex = registeredCoursesTable.getSelectedRow();
        String courseId = registeredCoursesTable.getValueAt(selectedRowIndex, 0).toString();
        
        Float newRating = Float.valueOf(courseRatingTextField.getText());
        
        Course course = this.business.getCourseDir().findCourse(courseId);
        Float currentRating = course.getReputationIndex();
        
        if(currentRating == 0.0)
        {
            course.setReputationIndex(newRating);
        }
        else
        {
            course.setReputationIndex((currentRating + newRating)/2);
        }
        
        displayRegisteredCourses();
    }//GEN-LAST:event_courseRatingButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new StudentJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton courseRatingButton;
    private javax.swing.JTextField courseRatingTextField;
    private javax.swing.JTable courseSearchTable;
    private javax.swing.JTextField courseSearchTextField;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JButton loginBtn;
    private javax.swing.JButton profRatingBtn;
    private javax.swing.JTextField profRatingTextField;
    private javax.swing.JButton registerCourseBtn;
    private javax.swing.JTable registeredCoursesTable;
    private javax.swing.JButton requestForTranscriptBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchTypeCBox;
    private javax.swing.JTextField studentEmailField;
    private javax.swing.JTextField studentIdField;
    private javax.swing.JTextField studentNameField;
    private javax.swing.JButton viewTrBtn;
    // End of variables declaration//GEN-END:variables
}
